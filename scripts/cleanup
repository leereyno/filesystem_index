#!/bin/env perl

####################################################################################################

use strict;                 # Force us to declare variables.  Good for avoiding sloppy code.
use warnings;               # Fuss when something seems fishy but isnt strictly an error.
use diagnostics;            # When there is an error or warning, try to explain it.
use autodie;                # Die when OS system calls fail and print an appropriate message

use utf8;                   # Use unicode utf8.
binmode STDOUT, ':utf8';    # Set stdout to utf8 so "wide" prints don't cause warning messages.

use 5.010;                  # Activate features present in this version of perl (e.g. "say").

use DBI;					# Connect to databases using the DBI API;
use Net::LDAP;				# Interface with LDAP servers

use Getopt::Long qw(:config pass_through); 		# Process "long" gnu style command line arguments
												# Do not complain about unknown options (pass_through)
use Term::ANSIColor qw(:constants); # Use ANSI escape sequence to give color output to text
$Term::ANSIColor::AUTORESET = 1;	# Set ANSIColor to automatically reset at the end of a print statement

my $date;
my $rootdir;
my $file;
my $line;

if ( $#ARGV < 2 )
{
    print "\nGotta give me a date, a rootdir, and a file\n\n";
    exit;
}

#print "$ARGV[0]\n";
#print "$ARGV[1]\n";
#print "$ARGV[2]\n";

$date=$ARGV[0];
$rootdir=$ARGV[1];
$file=$ARGV[2];

open(INFO, $file) or die("Could not open file.");

foreach $line (<INFO>)
{   
    $line =~ s/\.\d+ -0700//g;
    print "\"$date\",\"$rootdir\",$line";
}

close(INFO);
